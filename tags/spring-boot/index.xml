<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring Boot on XLabs</title><link>https://www.xlabs.club/tags/spring-boot/</link><description>Recent content in Spring Boot on XLabs</description><generator>Hugo</generator><language>zh</language><copyright>Copyright (c) 2020-2024 XLabs Club</copyright><lastBuildDate>Sat, 30 Nov 2024 11:41:19 +0800</lastBuildDate><atom:link href="https://www.xlabs.club/tags/spring-boot/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring Boot Start 脚手架定制开发和快速入门</title><link>https://www.xlabs.club/blog/spring-boot-start-site/</link><pubDate>Sat, 09 Mar 2024 14:29:03 +0800</pubDate><guid>https://www.xlabs.club/blog/spring-boot-start-site/</guid><description>&lt;p>介绍基于 &lt;code>start.spring.io&lt;/code> 快速定制自己的 Spring Boot 脚手架，主要应用场景：&lt;/p>
&lt;ol>
&lt;li>规范公司自己的 parent pom，增加特定的依赖项。&lt;/li>
&lt;li>根据公司规范生成统一的包结构，统一命名。&lt;/li>
&lt;li>根据需要增加特定代码或文件，比如根据公司要求统一 logback.xml、 application.properties 文件。&lt;/li>
&lt;li>提供公司自研的二方 jar 包。&lt;/li>
&lt;/ol>
&lt;h2 id="快速开始">快速开始&lt;/h2>
&lt;p>基本步骤：&lt;/p>
&lt;ol>
&lt;li>对于 &lt;a href="https://github.com/spring-io/initializr" target="_blank" rel="noopener">spring.initializr&lt;/a>
 我们没有定制的需求，直接引用官方的。&lt;/li>
&lt;li>拷贝一份 &lt;a href="https://github.com/spring-io/start.spring.io" target="_blank" rel="noopener">start.spring.io&lt;/a>
，直接基于这个项目开发、部署、运行。以下都是关于如何修改 &lt;code>start.spring.io&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>&lt;code>start.spring.io&lt;/code> 主要关注两个模块：&lt;/p>
&lt;ul>
&lt;li>start-client：前端页面，可以定制些自己的 logo、title 等。&lt;/li>
&lt;li>start-site：是一个标准的 spring boot 项目，实际 run 起来的服务，引用了 start-client，直接 run 这个项目的 main 方法就能看到效果。&lt;/li>
&lt;/ul>
&lt;p>主要配置文件：&lt;code>start-site/src/main/resources/application.yml&lt;/code>，通过修改这个配置文件可以达到的效果如下。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>修改 start 启动时默认 group，把 &lt;code>com.example&lt;/code> 改为公司自己的 group。&lt;/p>



&lt;div class="expressive-code">
 &lt;figure class="frame not-content">
 &lt;figcaption class="header">
 &lt;span class="title">&lt;/span>
 &lt;/figcaption>
 &lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">initializr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">group-id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">com.yourgroup&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/figure>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>修改父 pom，使用公司自己的 pom。&lt;/p>



&lt;div class="expressive-code">
 &lt;figure class="frame not-content">
 &lt;figcaption class="header">
 &lt;span class="title">&lt;/span>
 &lt;/figcaption>
 &lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">initializr&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">maven&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># use your parent pom&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">parent&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">groupId&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">com.yourself&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">artifactId&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">your-parent&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1.0.0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># relativePath: ../pom.xml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">includeSpringBootBom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/figure>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>限定 Java 和 Spring Boot 版：修改 languages 和 bootVersions 即可。&lt;/p></description></item><item><title>从 Spring 到 Spring Boot，迁移升级快速入门以及各种踩坑记录</title><link>https://www.xlabs.club/blog/migrating-spring-to-spring-boot/</link><pubDate>Sat, 07 Jan 2023 10:54:37 +0800</pubDate><guid>https://www.xlabs.club/blog/migrating-spring-to-spring-boot/</guid><description>&lt;p>从 Spring 到 Spring Boot，迁移升级快速入门以及各种踩坑记录。&lt;/p>
&lt;h2 id="概述">概述&lt;/h2>
&lt;p>从 Spring 到 Spring Boot，整体开发、运行方式主要变化。&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>-&lt;/th>
 &lt;th>当前（老）模式&lt;/th>
 &lt;th>新模式（本地开发）&lt;/th>
 &lt;th>新模式（线上运行）&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>开发习惯&lt;/td>
 &lt;td>Spring + 外置 Tomcat&lt;/td>
 &lt;td>Spring Boot（embed tomcat）&lt;/td>
 &lt;td>Spring Boot War or Jar&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Java 版本&lt;/td>
 &lt;td>8、11、16、17&lt;/td>
 &lt;td>11、17、21（推荐）&lt;/td>
 &lt;td>11、17、21（推荐）&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>Tomcat 版本&lt;/td>
 &lt;td>8.x、9.x&lt;/td>
 &lt;td>9.x&lt;/td>
 &lt;td>9.x（推荐）、10.x&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>说明：&lt;/p>
&lt;ol>
&lt;li>理论上完全兼容 Java11，但是要求业务方尽量使用 Java17 或 21。其他版本都是实验性质尽量兼容。&lt;/li>
&lt;li>线上运行支持 Spring Boot jar 直接运行，但主要业务仍推荐以 war + tomcat 为主。如果希望以 &lt;code>java -jar&lt;/code> 方式运行，参考下面的章节“jar 方式运行”描述。&lt;/li>
&lt;li>目前 Spring Boot 主要推行版本是 2.7.x。 3.x 版本逐渐适配中，注意 3.x 要求 Java 最低版本是 17。&lt;/li>
&lt;/ol>
&lt;h2 id="快速开始">快速开始&lt;/h2>
&lt;ol>
&lt;li>线下支撑系统导航，点击 &lt;code>脚手架&lt;/code> 进入 spring start 页面，按自己需求选择模块，生成自己业务模式初始化代码。&lt;/li>
&lt;li>写（Copy）业务代码到项目里，修改 pom.xml 根据需要添加新的依赖。&lt;/li>
&lt;li>查看本文档中 &lt;code>遇见问题及解决方案&lt;/code> 章节，注意如果是老项目迁移，这一步很重要。&lt;/li>
&lt;li>本地开发工具启动 main 方法。&lt;/li>
&lt;li>上线发布系统，选择 &lt;code>tomcat9:openjdk17&lt;/code> 镜像，并勾选 &lt;code>镜像 JDK 版本编译代码&lt;/code>。&lt;/li>
&lt;/ol>
&lt;p>以上生成的一个最简略的代码结构，更多复杂使用方式参考下方主要 starter 使用说明。&lt;/p></description></item><item><title>Spring Boot 使用 Micrometer 集成 Prometheus 监控，5 分钟接入自定义监控指标</title><link>https://www.xlabs.club/blog/spring-boot-micrometer/</link><pubDate>Mon, 07 Aug 2023 10:54:37 +0800</pubDate><guid>https://www.xlabs.club/blog/spring-boot-micrometer/</guid><description>&lt;p>Spring Boot 使用 Micrometer 集成 Prometheus 监控，5 分钟接入自定义监控指标，主要内容：&lt;/p>
&lt;ol>
&lt;li>Micrometer 介绍。&lt;/li>
&lt;li>业务如何自定义指标，如何接入 Prometheus，实现方式和规范。&lt;/li>
&lt;/ol>
&lt;h2 id="micrometer-介绍">Micrometer 介绍&lt;/h2>
&lt;p>Micrometer 为 Java 平台上的性能数据收集提供了一个通用的 API，应用程序只需要使用 Micrometer 的通用 API 来收集性能指标，Micrometer 会负责完成与不同监控系统的适配工作。&lt;/p>
&lt;p>Micrometer 提供了多种度量指标类型（Timers、Guauges、Counters 等），同时支持接入不同的监控系统，例如 Influxdb、Graphite、Prometheus、OTLP 等。&lt;/p>
&lt;p>从 Spring Boot 2.x 开始使用 Micrometer 作为默认的监控门面接口， &lt;code>Think SLF4J, but for observability&lt;/code> 。&lt;/p>
&lt;h3 id="micrometer-核心概念">Micrometer 核心概念&lt;/h3>
&lt;p>Micrometer 中两个最核心的概念：计量器注册表 (MeterRegistry)，计量器 (Meter)。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>MeterRegistry&lt;/p>
&lt;ul>
&lt;li>内存注册表 (SimpleMeterRegistry): 在内存中保存每一个 Meter（指标）的最新值，并且不会将数据导出到任何地方。&lt;/li>
&lt;li>组合注册表 (CompositeMeterRegistry): 可以添加多个注册表，用于将各个注册表组合起来，可以同时将指标发布到多个监控系统。Micrometer 提供了一个全局的 MeterRegistry，&lt;code>io.micrometer.core.instrument.Metrics&lt;/code> 中持有一个静态 final 的 CompositeMeterRegistry 实例 globalRegistry。&lt;/li>
&lt;li>普罗米修斯注册表 (PrometheusMeterRegistry): 当使用普罗米修斯监控时，引入 micrometer-registry-prometheus 依赖时会提供此种收集器，用于将指标数据转换为普罗米修斯识别的格式和导出数据等功能。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Meter（指标）&lt;/p>
&lt;p>监控数据的整个过程都是围绕着 Meter（指标）, 通过一个一个的 Meter（指标）数据来进行观察应用的状态。常用的指标如：&lt;/p></description></item><item><title>基于 Envoy 的智能路由服务</title><link>https://www.xlabs.club/docs/cloud/service-mesh-envoy/</link><pubDate>Mon, 07 Aug 2023 10:54:37 +0800</pubDate><guid>https://www.xlabs.club/docs/cloud/service-mesh-envoy/</guid><description>&lt;p>基于 Envoy + Java Agent 的智能路由服务实现方案介绍。&lt;/p>
&lt;h2 id="核心需求">核心需求&lt;/h2>
&lt;ol>
&lt;li>服务自动注册和发现，通过 Service Name 直接调用服务。当然基本的负载均衡策略、熔断降级限流等功能也要支持。&lt;/li>
&lt;li>公司约定的路由策略，支持按照租户路由到特定环境的服务，比如 VIP、Gray、Sandbox 等。&lt;/li>
&lt;li>多集群通信，同云内新老 K8S 集群路由打通，可通过 POD IP 互相通信。&lt;/li>
&lt;li>跨云通信，支持通过 VPN 或代理，从专属云访问公有云服务。&lt;/li>
&lt;/ol>
&lt;h2 id="整体架构">整体架构&lt;/h2>
&lt;p>智能路由服务从逻辑上分为数据平面和控制平面，主要包含以下组件。&lt;/p>
&lt;ul>
&lt;li>Nacos：服务注册中心，配置中心。&lt;/li>
&lt;li>XDS Server：对接服务注册中心、配置中心，实现 CDS、LDS、RDS 协议将集群、服务、路由、灰度租户等配置下发到 Envoy。&lt;/li>
&lt;li>Envoy + WASM Plugin：通过 Envoy 代理流量，自定义 WASM 插件实现按照租户、用户路由到不同服务，实现自定义负载均衡策略。&lt;/li>
&lt;li>Java Agent：增强 Java 应用 Http Client，拦截 OkHttp、Apache Http Client、RestTemplate、OpenFeign 等客户端调用，将流量重定向到 Envoy，Envoy 再根据服务名路由到真实的 Pod，实现服务发现和灾备切换。&lt;/li>
&lt;li>Nacos Service CRD：自定义 Nacos Service CRD，将 Service 注册到 Nacos 中作为一个永久实例，解决跨云、跨集群服务调用。比如跨云情况下注册的是一个公网地址或 VPN 可通的地址。&lt;/li>
&lt;/ul>
&lt;div class="mermaid text-center">
C4Context
 title 基于 Envoy + Java Agent 的智能路由服务

 Enterprise_Boundary(dp, "Data Plane") {
 Container(appA, "Application A", "Java,Agent", "Agent 拦截客户端重定向到 Envoy")
 Container(envoy, "Envoy Proxy", "Envoy,WASM", "代理所有入口流量&lt;br>基于租户、服务负载均衡")
 Container(appB, "Application B", "Java,Agent", "应用注册到服务中心")

 Rel(appA, envoy, "request by name", "http")
 Rel(envoy, appB, "http proxy &amp; lb", "http")
 UpdateRelStyle(appA, envoy, $offsetX="-40",$offsetY="-40")
 UpdateRelStyle(envoy, appB, $offsetX="-40",$offsetY="-40")
 }

 Enterprise_Boundary(cp, "Control Plane") {
 System(registry, "服务注册", "服务注册，服务元数据&lt;br>配置管理，双向刷新")
 Container(xdsServer, "控制面板", "Java,Grpc", "对接服务注册中心配置中心&lt;br> 实现 XDS 协议将配置下发到 Envoy")
 System(config, "配置管理", "服务注册，服务元数据&lt;br>配置管理，双向刷新")

 Rel_L(xdsServer, registry, "实时获取服务实例")
 Rel_R(xdsServer, config, "实时配置刷新")
 UpdateRelStyle(xdsServer, registry, $offsetX="-40",$offsetY="-20")
 UpdateRelStyle(xdsServer, config, $offsetX="-40",$offsetY="-20")

 }

 Rel_U(xdsServer,envoy,"通过 XDS 实现配置动态下发","grpc")
 Rel_D(appA, registry, "服务注册，配置刷新")
 Rel_D(appB, config, "服务注册，配置刷新")

 UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="1")
&lt;/div>

&lt;h2 id="方案对比">方案对比&lt;/h2>
&lt;p>此方案原始的目标有几个：&lt;/p></description></item></channel></rss>