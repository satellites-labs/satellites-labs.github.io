<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Envoy on XLabs</title><link>https://www.xlabs.club/tags/envoy/</link><description>Recent content in Envoy on XLabs</description><generator>Hugo</generator><language>zh</language><copyright>Copyright (c) 2020-2024 XLabs Club</copyright><lastBuildDate>Sun, 12 Jan 2025 12:41:58 +0800</lastBuildDate><atom:link href="https://www.xlabs.club/tags/envoy/index.xml" rel="self" type="application/rss+xml"/><item><title>基于 Envoy 的智能路由服务</title><link>https://www.xlabs.club/docs/cloud/service-mesh-envoy/</link><pubDate>Mon, 07 Aug 2023 10:54:37 +0800</pubDate><guid>https://www.xlabs.club/docs/cloud/service-mesh-envoy/</guid><description>&lt;p>基于 Envoy + Java Agent 的智能路由服务实现方案介绍。&lt;/p>
&lt;h2 id="核心需求">核心需求&lt;/h2>
&lt;ol>
&lt;li>服务自动注册和发现，通过 Service Name 直接调用服务。当然基本的负载均衡策略、熔断降级限流等功能也要支持。&lt;/li>
&lt;li>公司约定的路由策略，支持按照租户路由到特定环境的服务，比如 VIP、Gray、Sandbox 等。&lt;/li>
&lt;li>多集群通信，同云内新老 K8S 集群路由打通，可通过 POD IP 互相通信。&lt;/li>
&lt;li>跨云通信，支持通过 VPN 或代理，从专属云访问公有云服务。&lt;/li>
&lt;/ol>
&lt;h2 id="整体架构">整体架构&lt;/h2>
&lt;p>智能路由服务从逻辑上分为数据平面和控制平面，主要包含以下组件。&lt;/p>
&lt;ul>
&lt;li>Nacos：服务注册中心，配置中心。&lt;/li>
&lt;li>XDS Server：对接服务注册中心、配置中心，实现 CDS、LDS、RDS 协议将集群、服务、路由、灰度租户等配置下发到 Envoy。&lt;/li>
&lt;li>Envoy + WASM Plugin：通过 Envoy 代理流量，自定义 WASM 插件实现按照租户、用户路由到不同服务，实现自定义负载均衡策略。&lt;/li>
&lt;li>Java Agent：增强 Java 应用 Http Client，拦截 OkHttp、Apache Http Client、RestTemplate、OpenFeign 等客户端调用，将流量重定向到 Envoy，Envoy 再根据服务名路由到真实的 Pod，实现服务发现和灾备切换。&lt;/li>
&lt;li>Nacos Service CRD：自定义 Nacos Service CRD，将 Service 注册到 Nacos 中作为一个永久实例，解决跨云、跨集群服务调用。比如跨云情况下注册的是一个公网地址或 VPN 可通的地址。&lt;/li>
&lt;/ul>
&lt;div class="mermaid text-center">
C4Context
 title 基于 Envoy + Java Agent 的智能路由服务

 Enterprise_Boundary(dp, "Data Plane") {
 Container(appA, "Application A", "Java,Agent", "Agent 拦截客户端重定向到 Envoy")
 Container(envoy, "Envoy Proxy", "Envoy,WASM", "代理所有入口流量&lt;br>基于租户、服务负载均衡")
 Container(appB, "Application B", "Java,Agent", "应用注册到服务中心")

 Rel(appA, envoy, "request by name", "http")
 Rel(envoy, appB, "http proxy &amp; lb", "http")
 UpdateRelStyle(appA, envoy, $offsetX="-40",$offsetY="-40")
 UpdateRelStyle(envoy, appB, $offsetX="-40",$offsetY="-40")
 }

 Enterprise_Boundary(cp, "Control Plane") {
 System(registry, "服务注册", "服务注册，服务元数据&lt;br>配置管理，双向刷新")
 Container(xdsServer, "控制面板", "Java,Grpc", "对接服务注册中心配置中心&lt;br> 实现 XDS 协议将配置下发到 Envoy")
 System(config, "配置管理", "服务注册，服务元数据&lt;br>配置管理，双向刷新")

 Rel_L(xdsServer, registry, "实时获取服务实例")
 Rel_R(xdsServer, config, "实时配置刷新")
 UpdateRelStyle(xdsServer, registry, $offsetX="-40",$offsetY="-20")
 UpdateRelStyle(xdsServer, config, $offsetX="-40",$offsetY="-20")

 }

 Rel_U(xdsServer,envoy,"通过 XDS 实现配置动态下发","grpc")
 Rel_D(appA, registry, "服务注册，配置刷新")
 Rel_D(appB, config, "服务注册，配置刷新")

 UpdateLayoutConfig($c4ShapeInRow="3", $c4BoundaryInRow="1")
&lt;/div>

&lt;h2 id="方案对比">方案对比&lt;/h2>
&lt;p>此方案原始的目标有几个：&lt;/p></description></item></channel></rss>