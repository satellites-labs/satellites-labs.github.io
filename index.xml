<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>卫星实验室 on XLabs</title><link>https://www.xlabs.club/</link><description>Recent content in 卫星实验室 on XLabs</description><generator>Hugo</generator><language>zh</language><copyright>Copyright (c) 2020-2024 XLabs Club</copyright><lastBuildDate>Sat, 28 Sep 2024 14:32:52 +0800</lastBuildDate><atom:link href="https://www.xlabs.club/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://www.xlabs.club/docs/cloud/introduction/</link><pubDate>Thu, 07 Sep 2023 16:04:48 +0200</pubDate><guid>https://www.xlabs.club/docs/cloud/introduction/</guid><description>&lt;p>云原生技术探索。&lt;/p></description></item><item><title>Introduction</title><link>https://www.xlabs.club/docs/guides/introduction/</link><pubDate>Thu, 07 Sep 2023 16:04:48 +0200</pubDate><guid>https://www.xlabs.club/docs/guides/introduction/</guid><description>&lt;p>卫星实验室，一个专注于技术创新的开源组织。&lt;/p>
&lt;p>此项目为卫星实验室主页 &lt;a href="https://www.xlabs.club" target="_blank" rel="noopener">xlabs.club&lt;/a>
 的源码，在这里将分享我们的平台工程实践经验，介绍如何以技术驱动业务长期发展和高速增长。&lt;/p>
&lt;p>欢迎提交 PR 进行开源共建。&lt;/p>
&lt;h2 id="主页内容">主页内容&lt;/h2>
&lt;ul>
&lt;li>平台工程：我们的平台工程建设之路，关于 DevOps, DataOps, FinOps 以及 AIOps 的工程实践。&lt;/li>
&lt;li>云原生：云原生技术探索，如何以云原生技术支撑起不断变化的复杂业务。&lt;/li>
&lt;li>技术博客：研发踩坑记录，翻一翻总有惊喜。&lt;/li>
&lt;li>awesome-x-ops：一些关于 AIOps、DataOps、DevOps、GitOps、FinOps 的优秀软件、博客、配套工具。&lt;/li>
&lt;li>xlabs-ops：一些 IaC 运维脚本和通用模板，如 Argo Workflows 模板仓库，是对官方 Examples 的组合、扩展。&lt;/li>
&lt;li>xlabs-developer-platform：一个基于 Backstage 自建的开发者平台。&lt;/li>
&lt;li>backstage-plugins：卫星实验室的开源 backstage plugins，欢迎提交 PR。&lt;/li>
&lt;/ul>
&lt;h2 id="license">License&lt;/h2>
&lt;p>本文档采用 &lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a>
 许可协议。&lt;/p></description></item><item><title>Kubernetes</title><link>https://www.xlabs.club/docs/tldr/kubernetes/</link><pubDate>Thu, 07 Sep 2023 16:04:48 +0200</pubDate><guid>https://www.xlabs.club/docs/tldr/kubernetes/</guid><description>&lt;p>常用 Kubernetes 命令，复制，粘贴，这就是生活。&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>复制 secret 到另一个 namespace。&lt;/li>
&lt;/ul>



&lt;div class="expressive-code">
 &lt;figure class="frame is-terminal not-content">
 &lt;figcaption class="header">
 &lt;span class="title">&lt;/span>
 &lt;/figcaption>
 &lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubectl get secret mys --namespace&lt;span class="o">=&lt;/span>na -oyaml &lt;span class="p">|&lt;/span> grep -v &lt;span class="s1">&amp;#39;^\s*namespace:\s&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> kubectl apply --namespace&lt;span class="o">=&lt;/span>nb -f -&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/figure>
&lt;/div>
&lt;ul>
&lt;li>批量删除 pod。&lt;/li>
&lt;/ul>



&lt;div class="expressive-code">
 &lt;figure class="frame is-terminal not-content">
 &lt;figcaption class="header">
 &lt;span class="title">&lt;/span>
 &lt;/figcaption>
 &lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubectl get pods --all-namespaces &lt;span class="p">|&lt;/span> grep Evicted &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{print $2 &amp;#34; --namespace=&amp;#34; $1}&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> xargs kubectl delete pod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Delete by label&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl delete pod -n idaas-book -l app.kubernetes.io/name&lt;span class="o">=&lt;/span>idaas-book&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/figure>
&lt;/div>
&lt;ul>
&lt;li>原地重启 Pod。&lt;/li>
&lt;/ul>



&lt;div class="expressive-code">
 &lt;figure class="frame is-terminal not-content">
 &lt;figcaption class="header">
 &lt;span class="title">&lt;/span>
 &lt;/figcaption>
 &lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubectl rollout restart deploy/xxx -n your-namespace&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/figure>
&lt;/div>
&lt;ul>
&lt;li>命令行快速扩缩容。&lt;/li>
&lt;/ul>



&lt;div class="expressive-code">
 &lt;figure class="frame is-terminal not-content">
 &lt;figcaption class="header">
 &lt;span class="title">&lt;/span>
 &lt;/figcaption>
 &lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># kubectl scale -h&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl scale --replicas&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> deploy/xxx -n your-namespace&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/figure>
&lt;/div>
&lt;ul>
&lt;li>密钥解密。&lt;/li>
&lt;/ul>



&lt;div class="expressive-code">
 &lt;figure class="frame is-terminal not-content">
 &lt;figcaption class="header">
 &lt;span class="title">&lt;/span>
 &lt;/figcaption>
 &lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> kubectl get secret my-creds -n mysql -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;{.data.ADMIN_PASSWORD}&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> base64 --decode&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/figure>
&lt;/div>
&lt;ul>
&lt;li>合并多个 kube config 文件。&lt;/li>
&lt;/ul>



&lt;div class="expressive-code">
 &lt;figure class="frame is-terminal not-content">
 &lt;figcaption class="header">
 &lt;span class="title">&lt;/span>
 &lt;/figcaption>
 &lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">KUBECONFIG&lt;/span>&lt;span class="o">=&lt;/span>~/.kube/config:~/.kube/anotherconfig
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl config view --flatten &amp;gt; ~/.kube/config-all
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cp ~/.kube/config-all ~/.kube/config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 顺手把权限改了，避免 helm 或 kubectl 客户端 warning&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod &lt;span class="m">600&lt;/span> ~/.kube/config&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/figure>
&lt;/div>
&lt;ul>
&lt;li>获取某个 namespace 下的全部资源，找出你看不见的资源，常用于 webhook/CR/CRD 等资源清理，解决强制删除失败。&lt;/li>
&lt;/ul>



&lt;div class="expressive-code">
 &lt;figure class="frame is-terminal not-content">
 &lt;figcaption class="header">
 &lt;span class="title">&lt;/span>
 &lt;/figcaption>
 &lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ns&lt;/span>&lt;span class="o">=&lt;/span>your-namespace
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> resource in &lt;span class="sb">`&lt;/span>kubectl api-resources --verbs&lt;span class="o">=&lt;/span>list --namespaced -o name &lt;span class="p">|&lt;/span> xargs -n &lt;span class="m">1&lt;/span> kubectl get -o name -n &lt;span class="nv">$ns&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> kubectl get &lt;span class="nv">$resource&lt;/span> -n &lt;span class="nv">$ns&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># kubectl patch $resource -p &amp;#39;{&amp;#34;metadata&amp;#34;: {&amp;#34;finalizers&amp;#34;: []}}&amp;#39; --type=&amp;#39;merge&amp;#39; -n $ns;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/figure>
&lt;/div>
&lt;ul>
&lt;li>根据特定字段排序 Pod 列表。&lt;/li>
&lt;/ul>



&lt;div class="expressive-code">
 &lt;figure class="frame is-terminal not-content">
 &lt;figcaption class="header">
 &lt;span class="title">&lt;/span>
 &lt;/figcaption>
 &lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 根据重启次数排序&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl get pods --sort-by&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;.status.containerStatuses[0].restartCount&amp;#39;&lt;/span> -A&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/figure>
&lt;/div></description></item><item><title>总体架构</title><link>https://www.xlabs.club/docs/platform/introduction/</link><pubDate>Thu, 07 Sep 2023 16:04:48 +0200</pubDate><guid>https://www.xlabs.club/docs/platform/introduction/</guid><description>&lt;p>我们的平台工程建设之路，介绍前期方案设计、中间踩坑历程。&lt;/p>
&lt;h2 id="原则">原则&lt;/h2>
&lt;p>分享我们平台工程建设的一些基本原则。&lt;/p>
&lt;ol>
&lt;li>以开发者为中心：赋能开发者，了解困难，解决问题，让开发者生活更轻松。&lt;/li>
&lt;li>自动化：自动化手动和重复性任务，减少人为错误，提高效率。&lt;/li>
&lt;li>标准化：标准化保持一致性，减少复杂性，减少团队认知负载，提供最佳实践和统一的编码结构。&lt;/li>
&lt;li>模块化：松耦合且独立的模块，可独立开发、测试和部署。&lt;/li>
&lt;li>弹性：可扩展水平扩缩容的能力，以及容错抗脆弱的能力。&lt;/li>
&lt;li>安全：相比于微服务、云原生领域的安全，在平台工程里，更强调代码、基础设施、数据和其他资源的安全。&lt;/li>
&lt;li>协作：平台工程师、开发人员、运维运营人员以及其他参与者之间的协作，提高生产力、促进创新并创造积极包容的工作环境。&lt;/li>
&lt;li>持续改进：持续性反馈、评估、改进。&lt;/li>
&lt;/ol>
&lt;h2 id="架构概述">架构概述&lt;/h2>
&lt;p>为便于理解，我们仍然按照惯用架构模型，将架构分为 IaaS、CaaS、PaaS、Applications 这几个层级。&lt;/p>
&lt;p>专业的运维人员作为 platform engineer 着重于 IaaS、CaaS、PaaS 建设，开发人员作为 application engineer 更专注于 PaaS、Applications 建设，为开发和运维提供工具、协作平台、基础应用。&lt;/p>
&lt;div class="mermaid text-center">
C4Context
 title 平台工程总体架构

 Boundary(users, "Users", "用户接入") {
 Person(superAdmin, "超级管理员")
 Person(admin, "平台管理员")
 Person(developer, "开发人员")
 Person(maintenance, "运维人员")
 }

 Boundary(console, "Console", "开发者平台") {
 Container(backstage, "Backstage","react","开发者门户")
 Container(apps, "应用管理平台","Application","容器管理、应用管理、配置管理、自动化测试")
 Container(ops, "统一运维平台","x-ops","数据库、中间件、日志、监控告警平台")
 Container(iam, "IAM", "Keycloak", "统一用户、组织、角色权限管理")
 }

 Boundary(paas, "PaaS", "PaaS") {
 ContainerDb(rds, "RDS", "PostgreSQL/MySQL", "PostgreSQL、MySQL 等关系型数据库")
 ContainerDb(clickhouse, "ClickHouse", "ClickHouse", "BI、Logging、Metrics 等列式数据库")
 ContainerDb(nosql, "NoSQL", "NoSQL", "ES、Redis、Mongo 等缓存数据库、文档数据库")
 ContainerDb(mq, "消息队列", "Kafka", "Kafka、RocketMQ 等消息队列")
 }

 Boundary(caas, "CaaS", "CaaS") {
 Container(k8s, "Kubernetes","k8s","K8S 容器平台")
 Container(workflow, "编排引擎","Argo","流水线，流程、应用编排引擎")
 Container(kms, "KMS","HashiCorp Vault","秘钥管理系统")
 Container(harbor, "Harbor","harbor","容器镜像仓库")
 Container(git, "IaC","GitLab","IaC、GitOps 源码仓库")
 }

 Boundary(iaas, "IaaS", "IaaS") {
 Container(vm, "云主机","vm","云主机自带本地存储")
 Container(cbh, "堡垒机","cbh","安全运维审计堡垒机")
 Container(s3, "S3","S3/Minio","分布式对象存储")
 Container(nfs, "NFS","nfs","共享文件存储")
 }

 UpdateLayoutConfig($c4ShapeInRow="4", $c4BoundaryInRow="1")
&lt;/div>

&lt;h2 id="基础设施标准化">基础设施标准化&lt;/h2>
&lt;p>基础设施标准化是平台工程建设的第一步，通过对基础设施服务进行标准化，减少开发人员和运维团队之间的摩擦，减少运维难度，大大降低出错的概率。&lt;/p></description></item><item><title>统一身份认证</title><link>https://www.xlabs.club/docs/platform/iam/</link><pubDate>Tue, 19 Dec 2023 22:26:42 +0800</pubDate><guid>https://www.xlabs.club/docs/platform/iam/</guid><description>&lt;p>统一身份认证（Identity and Access Management，身份认证和访问控制，简称 IAM）的技术选型和实践。&lt;/p>
&lt;h2 id="核心需求">核心需求&lt;/h2>
&lt;ul>
&lt;li>集中管理：从一个地方管理账户和身份。&lt;/li>
&lt;li>单点登录：允许用户使用一组凭据访问所有集成的系统和应用，避免记忆多个用户名和密码。&lt;/li>
&lt;li>动态访问控制：基于角色和策略动态授予或撤销访问权限。&lt;/li>
&lt;li>审计与合规：记录和监控访问活动，以支持合规性审计。&lt;/li>
&lt;li>无缝快速集成：作为平台工程的一部分更强调“自助”，各个应用能够无缝快速接入，甚至有些应用只需要简单的权限能够不需要开发自动接入。&lt;/li>
&lt;li>强化认证机制：采用多因素认证（MFA）等方法，确保只有授权用户才能访问系统和数据。&lt;/li>
&lt;/ul>
&lt;h2 id="技术选项">技术选项&lt;/h2>
&lt;p>为满足以上需求，在初期技术选项时主要关注以下几个开源组件。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/keycloak/" target="_blank" rel="noopener">keycloak&lt;/a>
: 全面的 IAM 解决方案 ，实现用户、权限管理，单点登录、MFA 等。&lt;/li>
&lt;li>&lt;a href="https://github.com/dexidp" target="_blank" rel="noopener">Dex&lt;/a>
: 身份代理，连接多个身份源，仅作为 OpenID Connect。&lt;/li>
&lt;li>&lt;a href="https://github.com/ory/" target="_blank" rel="noopener">Ory&lt;/a>
: 包含多个独立的组件，组成一个全家桶的解决方案。&lt;/li>
&lt;li>&lt;a href="https://github.com/oauth2-proxy" target="_blank" rel="noopener">oauth2-proxy&lt;/a>
: 反向代理工具，专为提供 OAuth 2.0 身份验证和授权服务而设计，附带基于用户、分组、角色的权限管理。&lt;/li>
&lt;li>&lt;a href="https://github.com/pomerium/" target="_blank" rel="noopener">Pomerium&lt;/a>
: Pomerium 不仅仅是一个 OAuth 2.0 代理，它还提供了细粒度的访问控制，能够根据用户、组、和其他上下文属性来决定访问权限。&lt;/li>
&lt;/ul>
&lt;p>以下为 keycloak 和 Dex 的简单对比。为什么不把 Ory 加进来，因为没有实际用过，不便于发表意见，如果你是一个 Ory 用户欢迎补充。&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th style="text-align: left">特性/工具&lt;/th>
 &lt;th style="text-align: left">Keycloak&lt;/th>
 &lt;th style="text-align: left">Dex&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>类型&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">全面的 IAM 解决方案&lt;/td>
 &lt;td style="text-align: left">身份代理&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>用户管理&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">支持内置用户管理&lt;/td>
 &lt;td style="text-align: left">不直接管理用户，依赖外部身份提供者&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>协议支持&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">OpenID Connect、OAuth 2.0、SAML 2.0&lt;/td>
 &lt;td style="text-align: left">OpenID Connect&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>SSO&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">支持&lt;/td>
 &lt;td style="text-align: left">依赖外部身份提供者实现&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>社交登录&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">支持多种社交登录选项&lt;/td>
 &lt;td style="text-align: left">不直接支持，可通过连接外部身份提供者实现&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>角色管理&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">支持复杂的角色和权限管理&lt;/td>
 &lt;td style="text-align: left">不直接支持&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>扩展性&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">高，适合各种规模和复杂性的需求&lt;/td>
 &lt;td style="text-align: left">适合将多个身份源统一到一个认证流程的环境&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>使用场景&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">需要全面、集中式身份管理的组织&lt;/td>
 &lt;td style="text-align: left">需要统一多个身份源认证，如在云原生环境中&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>用户界面&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">提供丰富的用户和管理员界面&lt;/td>
 &lt;td style="text-align: left">主要是 API，没有详细的用户界面&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td style="text-align: left">&lt;strong>适用性&lt;/strong>&lt;/td>
 &lt;td style="text-align: left">适用于需要完整 IAM 解决方案的组织&lt;/td>
 &lt;td style="text-align: left">适用于作为多个身份源代理，尤其在 Kubernetes 环境中&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>以下为 OAuth2 Proxy 和 Pomerium 的简单对比。&lt;/p></description></item><item><title>卫星实验室友情链接</title><link>https://www.xlabs.club/blog/xlabs-link-exchange/</link><pubDate>Thu, 26 Sep 2024 09:27:42 +0800</pubDate><guid>https://www.xlabs.club/blog/xlabs-link-exchange/</guid><description>&lt;p>在建设本博客的过程中，发现了一些有趣有用的原创独立博客，以及很多良心开源产品，我觉得有必要把他们展示出来。&lt;/p>
&lt;p>如有侵权，请提 issue，如有推荐，请到 &lt;a href="https://github.com/xlabs-club/xlabs-club.github.io" target="_blank" rel="noopener">GitHub&lt;/a>
 提交 PR。&lt;/p>
&lt;h2 id="独立博客">独立博客&lt;/h2>
&lt;ul>
&lt;li>地瓜哥，分享技术带来的喜悦：&lt;a href="https://www.diguage.com" target="_blank" rel="noopener">https://www.diguage.com&lt;/a>
。&lt;/li>
&lt;/ul>
&lt;h2 id="独立产品">独立产品&lt;/h2></description></item><item><title>Koupleless 试用报告总结，踩坑记录分享</title><link>https://www.xlabs.club/blog/koupleless-first-boot/</link><pubDate>Mon, 27 May 2024 14:20:24 +0800</pubDate><guid>https://www.xlabs.club/blog/koupleless-first-boot/</guid><description>&lt;p>我们公司的主要应用都是以 Java 作为开发语言，这几年随着业务的高速增长，应用数目越来越多，CPU 内存资源占用越来越多，项目组之间开发合作效率也越来越低。&lt;/p>
&lt;p>顺应这个时代降本增效的目的，我们希望寻找一个能解决当前几个核心问题的框架：&lt;/p>
&lt;ul>
&lt;li>模块化开发、部署、资源共享的能力，减少 Cache、Class 等资源占用，有效降低内存占用。&lt;/li>
&lt;li>更快更轻的依赖，应用能够更快的启动。&lt;/li>
&lt;li>能够让各个项目组不改代码或少改代码即可接入，控制开发迁移的成本，毕竟很多历史老应用不是那么容易迁移。&lt;/li>
&lt;/ul>
&lt;p>基于以上背景，我们在 2022 年基于 SOFAArk 运行了一个版本，效果不太理想暂时搁置。今年 Koupleless 重新开源后做了一些增强和变更，开源社区活跃度有所提升，看宣传效果很好，我们决定重新评估是否可在公司内推广。&lt;/p>
&lt;h2 id="什么是-koupleless">什么是 Koupleless&lt;/h2>
&lt;p>&lt;a href="https://koupleless.io/home/" target="_blank" rel="noopener">Koupleless&lt;/a>
 是一种模块化 Serverless 技术解决方案，它能让普通应用低成本演进为 Serverless 研发模式，让代码与资源解耦，轻松独立维护， 与此同时支持秒级构建部署、合并部署、动态伸缩等能力为用户提供极致的研发运维体验，最终帮助企业实现降本增效。&lt;/p>
&lt;p>Koupleless 是蚂蚁集团内部经过 5 年打磨成熟的研发框架和运维调度平台能力，相较于传统镜像化的应用模式研发、运维、运行阶段都有 10 倍左右的提升，总结起来 5 大特点：快、省、灵活部署、平滑演进、生产规模化验证。&lt;/p>
&lt;p>以上都是官网的宣传，更多介绍请链接到官网查看。&lt;/p>
&lt;p>在整个 Koupleless 平台里，需要四个组件：&lt;/p>
&lt;ul>
&lt;li>研发工具 Arkctl, 提供模块创建、快速联调测试等能力。&lt;/li>
&lt;li>运行组件 SOFAArk, Arklet，提供模块运维、模块生命周期管理，多模块运行环境。（这算两个组件？）&lt;/li>
&lt;li>控制面组件 ModuleController，本质上是一个 K8S Operator，提供模块发布与运维能力。&lt;/li>
&lt;/ul>
&lt;p>我们公司有自己的发布系统、应用管理平台，很少允许运行额外的控制面组件，那么除去 ModuleController，我个人认为，Koupleless 约等于 SOFAArk。&lt;/p>
&lt;p>Koupleless 增强了 SOFAArk 运维部署相关的功能，解决了 SOFAArk 在企业内无法开箱即用的问题。&lt;/p>
&lt;h2 id="应用接入遇见问题">应用接入遇见问题&lt;/h2>
&lt;p>基于官方文档我们改造接入了几个应用，分享几个我们遇见的问题。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>对 Java 17 或 21 的支持不好。
虽然官方已经声称支持 Java 17，但是若用了 Java 17 的语法或新特性，无法编译通过。最后只好自编译 SOFAArk plugin 修改相关依赖解决。&lt;/p></description></item><item><title>容器镜像制作最佳实践，Dockerfile 实践经验和踩坑记录</title><link>https://www.xlabs.club/blog/docker-best-practices/</link><pubDate>Fri, 24 May 2024 20:56:08 +0800</pubDate><guid>https://www.xlabs.club/blog/docker-best-practices/</guid><description>&lt;p>整理了由 Docker 官方和社区推荐的用于构建高效镜像的最佳实践和方法，当然有些可能并不适用于你，请注意分辨。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>使用官方镜像作为基础镜像。官方镜像经过了充分验证并集成了最佳实践。&lt;/p>



&lt;div class="expressive-code">
 &lt;figure class="frame not-content">
 &lt;figcaption class="header">
 &lt;span class="title">&lt;/span>
 &lt;/figcaption>
 &lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># 正例：&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> FROM node&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># 反例：&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> FROM ubuntu&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> RUN apt-get install -y node&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/figure>
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>保持尽可能小的镜像大小，绝不安装无关依赖。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>严格的版本化管理，使用确定性的标签，基础镜像禁用 latest。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 .dockerignore 文件排除文件干扰。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最经常变化的命令越往后执行，充分利用分层缓存机制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Dockerfile 中每行命令产生一层，请合并命令执行，最大限度减少层数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用多阶段构建，减少所构建镜像的大小。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>禁用 root 用户，使用独立的 use 和 group。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>启用镜像安全扫描，并及时更新。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个容器只专注做一件事情。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Java 应用程序不要使用 PID 为 1 的进程，使用 tini 或 dump-init 管理进程，避免僵尸进程。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>以上都是一些基本的原则，但是实际工作的过程中，大家可能会像我一样纠结几个问题。&lt;/p>
&lt;ul>
&lt;li>关于第 1 点，一定要使用官方镜像吗。未必，看情况。比如我们作为平台，涉及很多种开发语言，很多种组合场景，每个官方基础镜像可能都不同，就会自建基础镜像，以便统一操作系统、统一脚本和安全维护。为什么要统一操作系统，操作系统投的毒，就像出骨鱼片里未净的刺，给人一种不期待的伤痛。&lt;/li>
&lt;li>为了镜像大小和安全，一定要使用 Alpine 或 distroless 镜像吗。我的建议是不要使用 Alpine 镜像，如有能力才使用 distroless 镜像。毕竟 libc 的坑，谁痛谁知道。&lt;/li>
&lt;/ul>
&lt;h2 id="我们的镜像策略">我们的镜像策略&lt;/h2>
&lt;h2 id="dockerfile-编写小技巧">Dockerfile 编写小技巧&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>使用 Heredocs 语法代替又长又臭的字符串拼接，当然 Heredocs 支持更多功能比如 run python、多文件内容拷贝，具体请参考官方文档。&lt;/p></description></item><item><title>从 Java 8 升级到 Java 21，踩坑记录、变更评估和工具介绍</title><link>https://www.xlabs.club/blog/migrating-java8-to-java21/</link><pubDate>Thu, 23 May 2024 21:03:11 +0800</pubDate><guid>https://www.xlabs.club/blog/migrating-java8-to-java21/</guid><description>&lt;h2 id="破坏性变更评估">破坏性变更评估&lt;/h2>
&lt;p>在升级之前，可通过 jdeps 和 jdeprscan 先评估下是否有使用内部类和废弃 API，有一个总的概览。&lt;/p>
&lt;p>jdeps 是 Java 自带的命令行工具，可以用来分析依赖关系和生成模块信息文件，这里我们只借用他的其中一项功能。&lt;/p>
&lt;p>通过 &lt;code>jdeps --jdk-internals&lt;/code> 检查是否有使用内部 API，以下例子显示使用了 &lt;code>sun.net.util.IPAddressUtil&lt;/code> 这个 Java 内部工具类，会显示详细的源码类和 jar 包位置。&lt;/p>
&lt;p>可以继续使用 Java 中的内部 API，OpenJDK Wiki 页面 &lt;a href="https://wiki.openjdk.org/display/JDK8/Java&amp;#43;Dependency&amp;#43;Analysis&amp;#43;Tool" target="_blank" rel="noopener">Java Dependency Analysis Tool&lt;/a>
 推荐了某些常用 JDK 内部 API 的替换项。&lt;/p>



&lt;div class="expressive-code">
 &lt;figure class="frame not-content">
 &lt;figcaption class="header">
 &lt;span class="title">&lt;/span>
 &lt;/figcaption>
 &lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-console" data-lang="console">&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="gp">$&lt;/span> jdeps -dotoutput &amp;lt;dot-file-dir&amp;gt; -jdkinternals &amp;lt;one-or-more-jar-files....&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="gp">$&lt;/span> jdeps --jdk-internals --multi-release &lt;span class="m">21&lt;/span> --class-path . target/*.jar
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">. -&amp;gt; java.base
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go"> com.my.package.function.SecurityChecker -&amp;gt; sun.net.util.IPAddressUtil JDK internal API (java.base)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="go">Warning: JDK internal APIs are unsupported and private to JDK implementation that are
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">subject to be removed or changed incompatibly and could break your application.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">Please modify your code to eliminate dependence on any JDK internal APIs.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">For the most recent update on JDK internal API replacements, please check:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="go">https://wiki.openjdk.org/display/JDK8/Java+Dependency+Analysis+Tool
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/figure>
&lt;/div>
&lt;p>jdeprscan 也是 Java 自带分析工具，可查看是否使用了已弃用或已删除的 API。使用已弃用的 API 不是阻塞性问题，还能接着跑，但是建议替换掉。使用已删除的 API，那就彻底跑不起来了。&lt;/p></description></item><item><title>使用 Pulumi 部署 cert-manager 创建 K8S 自签名证书并信任证书</title><link>https://www.xlabs.club/blog/trust-cert-manager-selfsigned-tls/</link><pubDate>Mon, 29 Apr 2024 21:49:22 +0800</pubDate><guid>https://www.xlabs.club/blog/trust-cert-manager-selfsigned-tls/</guid><description>&lt;p>在搭建本地 Kubernetus 集群后，由于环境在内网，做不了域名验证，无法使用 Let&amp;rsquo;s Encrypt 颁发和自动更新证书，然而很多应用要求必须启用 HTTPS，只能用自签名 CA 证书，并由此 CA 继续颁发其他证书。&lt;/p>
&lt;p>所以我们准备了以下工具，开始搭建。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.pulumi.com/" target="_blank" rel="noopener">Pulumi&lt;/a>
: 当前非常流行的 IaC 工具，值得一试。&lt;/li>
&lt;li>&lt;a href="https://cert-manager.io/" target="_blank" rel="noopener">cert-manager&lt;/a>
: 云原生证书管理，用于自动管理和颁发各种发行来源的 TLS 证书。它将确保证书有效并定期更新，并尝试在到期前的适当时间更新证书。&lt;/li>
&lt;/ul>
&lt;p>核心步骤和相关代码如下，更多源码请参考我们的 GitHub 项目 &lt;a href="https://github.com/xlabs-club/xlabs-ops" target="_blank" rel="noopener">xlabs-ops&lt;/a>
。&lt;/p>
&lt;p>使用 Pulumi 安装 cert-manager，生成自签名 CA 证书，根据自签名 CA 证书生成 cert-manager ClusterIssuer，都在如下代码了。&lt;/p>



&lt;div class="expressive-code">
 &lt;figure class="frame not-content">
 &lt;figcaption class="header">
 &lt;span class="title">&lt;/span>
 &lt;/figcaption>
 &lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ts" data-lang="ts">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">pulumi&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;@pulumi/pulumi&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">kubernetes&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;@pulumi/kubernetes&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nx">tls&lt;/span> &lt;span class="kr">from&lt;/span> &lt;span class="s2">&amp;#34;@pulumi/tls&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 部署 cert-manager Helm chart
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">certManagerRelease&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">helm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">v3&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Release&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;cert-manager&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;cert-manager&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">chart&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;cert-manager&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">version&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;1.14.5&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">namespace&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;cert-manager&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">createNamespace&lt;/span>: &lt;span class="kt">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">timeout&lt;/span>: &lt;span class="kt">600&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">repositoryOpts&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">repo&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;https://charts.jetstack.io&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">values&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">installCRDs&lt;/span>: &lt;span class="kt">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 生成一个 CA private key
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">caPrivateKey&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">tls&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">PrivateKey&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;caPrivateKey&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">algorithm&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;RSA&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 生成一个 自签名 CA 证书
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">caCert&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">tls&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">SelfSignedCert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;caCert&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// keyAlgorithm: &amp;#34;RSA&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">privateKeyPem&lt;/span>: &lt;span class="kt">caPrivateKey.privateKeyPem&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">isCaCertificate&lt;/span>: &lt;span class="kt">true&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">validityPeriodHours&lt;/span>: &lt;span class="kt">87600&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// 10 year
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">allowedUses&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;cert_signing&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;crl_signing&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">subject&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">commonName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;your.domain.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">organization&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Xlabs Club&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 生成一个带有 CA crt 和 key 的 Kubernetes Secret
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">caSecret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">core&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">v1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Secret&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;caSecret&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">metadata&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;selfsigned-cert-manager-ca&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">namespace&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;cert-manager&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Opaque&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">stringData&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;tls.crt&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">caCert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">certPem&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;tls.key&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">caPrivateKey&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">privateKeyPem&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 创建一个自签名的 ClusterIssuer 给 ingress 用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">clusterIssuer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">kubernetes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">apiextensions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CustomResource&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;selfsigned-issuer&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">apiVersion&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;cert-manager.io/v1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">kind&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;ClusterIssuer&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">metadata&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;selfsigned-issuer&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 注意 ClusterIssuer 和 caSecret 放在同一个 namespace，不写 namespace 时 ClusterIssuer 找不到 caSecret
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">namespace&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;cert-manager&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">spec&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ca&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">secretName&lt;/span>: &lt;span class="kt">caSecret.metadata.name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nx">dependsOn&lt;/span>: &lt;span class="kt">certManagerRelease&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">certManagerVersion&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">certManagerRelease&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">version&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">clusterIssuerName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">clusterIssuer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">metadata&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Export CA 证书，便于客户端导入信任证书
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">caCertificatePem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">caCert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">certPem&lt;/span>&lt;span class="p">;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/figure>
&lt;/div>
&lt;p>以上执行 &lt;code>pulumi up&lt;/code> 后，我们就得到了一个自签名的 CA 证书、一个可用于为 ingress 自动签发 TLS 的 ClusterIssuer。&lt;/p></description></item></channel></rss>